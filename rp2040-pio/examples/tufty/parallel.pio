.program st7789_parallel
.side_set 1

.wrap_target
    out pins, 8  side 0
    nop          side 1
.wrap

% go {
//go:build rp2040
// +build rp2040

package main

import (
	"machine"

	pio "github.com/tinygo-org/pio/rp2040-pio"
)

// helper function to setup GPIO output and configure the SM to output on needed pins
func parallelST7789Init(sm pio.StateMachine, offset uint8, dStart machine.Pin, wr machine.Pin) {
	Pio := sm.PIO()
    dStart.Configure(machine.PinConfig{Mode: Pio.PinMode()})
	sm.SetConsecutivePinDirs(dStart, 8, true)
	wr.Configure(machine.PinConfig{Mode: Pio.PinMode()})

	cfg := st7789_parallelProgramDefaultConfig(offset)
	cfg.SetOutPins(dStart, 8)
	cfg.SetSidesetPins(wr)
	cfg.SetFIFOJoin(pio.FifoJoinTx)
	cfg.SetOutShift(false, true, 8)

	maxPIOClk := uint32(32 * machine.MHz)
	sysClkHz := machine.CPUFrequency()
	clkDiv := (sysClkHz + maxPIOClk - 1) / maxPIOClk
	cfg.SetClkDivIntFrac(uint16(clkDiv), 1)

	sm.Init(offset, cfg)
}
%}